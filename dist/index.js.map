{
  "version": 3,
  "sources": ["../lib/varianceyc.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657\u201365. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = varianceyc( x.length, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction varianceyc( N, correction, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = x[ ix ];\n\tix += stride;\n\tS = 0.0;\n\tfor ( i = 2; i <= N; i++ ) {\n\t\tv = x[ ix ];\n\t\tsum += v;\n\t\td = (i*v) - sum;\n\t\tS += (1.0/(i*(i-1))) * d * d;\n\t\tix += stride;\n\t}\n\treturn S / n;\n}\n\n\n// EXPORTS //\n\nmodule.exports = varianceyc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* ## Method\n*\n* -   This implementation uses a one-pass algorithm, as proposed by Youngs and Cramer (1971).\n*\n* ## References\n*\n* -   Youngs, Edward A., and Elliot M. Cramer. 1971. \"Some Results Relevant to Choice of Sum and Sum-of-Product Algorithms.\" _Technometrics_ 13 (3): 657\u201365. doi:[10.1080/00401706.1971.10488826](https://doi.org/10.1080/00401706.1971.10488826).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = varianceyc( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction varianceyc( N, correction, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar S;\n\tvar v;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\tsum = x[ offset ];\n\tix = offset + stride;\n\tS = 0.0;\n\tfor ( i = 2; i <= N; i++ ) {\n\t\tv = x[ ix ];\n\t\tsum += v;\n\t\td = (i*v) - sum;\n\t\tS += (1.0/(i*(i-1))) * d * d;\n\t\tix += stride;\n\t}\n\treturn S / n;\n}\n\n\n// EXPORTS //\n\nmodule.exports = varianceyc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar varianceyc = require( './varianceyc.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( varianceyc, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = varianceyc;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a strided array using a one-pass algorithm proposed by Youngs and Cramer.\n*\n* @module @stdlib/stats-base-varianceyc\n*\n* @example\n* var varianceyc = require( '@stdlib/stats-base-varianceyc' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = varianceyc( N, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var varianceyc = require( '@stdlib/stats-base-varianceyc' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = varianceyc.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"ndarray\": \"main.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cA6CA,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAS,CAC/C,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIT,EAAIC,EACHD,GAAK,GAAKS,GAAK,EACnB,MAAO,KAER,GAAKT,IAAM,GAAKG,IAAW,EAC1B,MAAO,GAUR,IARKA,EAAS,EACbE,GAAM,EAAEL,GAAKG,EAEbE,EAAK,EAEND,EAAMF,EAAGG,CAAG,EACZA,GAAMF,EACNG,EAAI,EACEI,EAAI,EAAGA,GAAKV,EAAGU,IACpBH,EAAIL,EAAGG,CAAG,EACVD,GAAOG,EACPC,EAAKE,EAAEH,EAAKH,EACZE,GAAM,GAAKI,GAAGA,EAAE,IAAOF,EAAIA,EAC3BH,GAAMF,EAEP,OAAOG,EAAIG,CACZ,CAKAX,EAAO,QAAUC,IClFjB,IAAAY,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAiDA,SAASC,EAAYC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CACvD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAGJ,GADAD,EAAIV,EAAIC,EACHD,GAAK,GAAKU,GAAK,EACnB,MAAO,KAER,GAAKV,IAAM,GAAKG,IAAW,EAC1B,MAAO,GAKR,IAHAE,EAAMH,EAAGE,CAAO,EAChBE,EAAKF,EAASD,EACdI,EAAI,EACEI,EAAI,EAAGA,GAAKX,EAAGW,IACpBH,EAAIN,EAAGI,CAAG,EACVD,GAAOG,EACPC,EAAKE,EAAEH,EAAKH,EACZE,GAAM,GAAKI,GAAGA,EAAE,IAAOF,EAAIA,EAC3BH,GAAMH,EAEP,OAAOI,EAAIG,CACZ,CAKAZ,EAAO,QAAUC,ICjFjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAa,IACbC,EAAU,IAKdF,EAAaC,EAAY,UAAWC,CAAQ,EAK5CH,EAAO,QAAUE,ICajB,IAAIE,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_varianceyc", "__commonJSMin", "exports", "module", "varianceyc", "N", "correction", "x", "stride", "sum", "ix", "S", "v", "d", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "varianceyc", "N", "correction", "x", "stride", "offset", "sum", "ix", "S", "v", "d", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "varianceyc", "ndarray", "main"]
}
